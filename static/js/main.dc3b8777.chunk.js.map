{"version":3,"sources":["serviceWorker.js","index.js","components/App.js","components/Navbar.js","components/Main.js","photo.png"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","ipfsClient","host","port","protocol","props","_this","Object","_Users_djsatoda_Desktop_decentragram_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","this","_Users_djsatoda_Desktop_decentragram_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_Users_djsatoda_Desktop_decentragram_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","setState","buffer","Buffer","result","capturePostFile","postBuffer","console","log","state","uploadPost","description","add","error","postResult","loading","alexandria","methods","hash","send","from","account","on","tipPostAuthor","id","tipAmount","value","Alexandria","posts","loadWeb3","loadBlockchainData","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","Contract","postCount","i","post","concat","_Users_djsatoda_Desktop_decentragram_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","sort","b","react__WEBPACK_IMPORTED_MODULE_8___default","_Navbar__WEBPACK_IMPORTED_MODULE_12__","className","_Main__WEBPACK_IMPORTED_MODULE_13__","Component","Navbar","react__WEBPACK_IMPORTED_MODULE_5___default","href","rel","width","height","src","Identicon","toString","Main","role","style","maxWidth","onSubmit","imageDescription","for","type","title","accept","onChange","ref","input","required","map","image","key","author","imageHash","action","postHash","utils","fromWei","name","onClick","toWei","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.dc3b8777.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\n// import Alexandria from '../abis/Alexandria.json' // BCB1\n// import Alexandria from '../abis/Alexandria.json' // BCB2\n\nimport Alexandria from '../abis/Alexandria.json';\nimport Navbar from './Navbar'\nimport Main from './Main'\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({host: 'ipfs.infura.io', port:5001, protocol: 'https'})\n\n\nclass App extends Component {\n\n  // before render() method called, it runs this code. Lifecycle callback\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    } else {\n      window.alert(\"Non-Ethereum browser detected. Please enable MetaMask!\")\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    \n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({account: accounts[0]})\n\n    const networkId = await web3.eth.net.getId()\n\n    // const networkData = Alexandria.networks[networkId]  // change this to 1 if you want main net\n    const networkData = 31  // change this to 1 if you want main net\n\n    if(networkData) {\n\n      // const contractAddress = \"0x1aA47235e66b8FaBe91888dCF3e43dCF58F41b7C\"   //blackbook2   \n      const contractAddress = \"0x292DF9d771537DeF350C4e8B9A2D0E5b210E1Bf5\" // Alexandria\n      const alexandria = web3.eth.Contract(Alexandria, contractAddress)\n\n      \n\n      this.setState({alexandria: alexandria})\n      const postCount = await alexandria.methods.postCount().call()\n      console.log(\"Contract object: \", alexandria)\n      this.setState({postCount: postCount})\n      \n\n      // Load posts \n      for (var i=1; i <= postCount; i++) {\n        const post = await alexandria.methods.posts(i).call()\n        console.log(\"POST: \", post)\n        this.setState({\n          posts: [...this.state.posts, post]\n        })\n      }\n\n      // Sort posts (highest tipped first)\n      this.setState({\n        posts: this.state.posts.sort((a,b) => b.tipAmount - a.tipAmount)\n      })\n\n      this.setState({loading: false})\n    } else {\n      window.alert(\"Alexandria contract not deployed to selected network\")\n    }\n  }\n\n  captureFile = event => {\n    event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n\n    reader.onloadend = () => {\n      this.setState({buffer: Buffer(reader.result)})\n      // console.log('buffer', this.state.buffer)\n    }\n  }\n\n  capturePostFile = event => {\n    event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n\n    reader.onloadend = () => {\n      this.setState({postBuffer: Buffer(reader.result)})\n      console.log('PB buffer', this.state.postBuffer)\n    }\n  }\n\n  uploadPost = description => {\n    console.log(\"Submitting files to IPFS\")\n    \n    // Add Preview Image to IPFS\n    ipfs.add(this.state.buffer, (error,result) => {\n      console.log(\"IPFS result\", result)\n      if(error) {\n        console.error(error)\n        return\n      }\n\n      // Add File to IPFS\n      ipfs.add(this.state.postBuffer, (error,postResult) => {\n        console.log(\"IPFS result\", postResult)\n        if(error) {\n          console.error(error)\n          return\n      }\n\n\n      this.setState({loading: true})\n      this.state.alexandria.methods.uploadPost(result[0].hash, description, postResult[0].hash).send({from: this.state.account}).on('transactionHash',(hash) => {\n        this.setState({loading: false})\n      })\n    })}) \n  }\n\n  tipPostAuthor = (id, tipAmount) => {\n    this.setState({loading: true})\n    this.state.alexandria.methods.tipPostAuthor(id).send({from: this.state.account, value: tipAmount}).on('transactionHash', (hash) => {\n      this.setState({loading: false})\n    })\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      Alexandria: null,\n      posts: [],\n      loading: true\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        { this.state.loading\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\n          : <Main\n            captureFile={this.captureFile}\n            capturePostFile={this.capturePostFile}\n            uploadPost={this.uploadPost}\n            posts={this.state.posts}\n            tipPostAuthor={this.tipPostAuthor}\n            />\n          }\n      </div>\n    );\n  }\n}\n\nexport default App;","import React, { Component } from 'react';\nimport Identicon from 'identicon.js';\nimport photo from '../photo.png'\n\nclass Navbar extends Component {\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n        <a\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n          href=\"/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {/* <img src={photo} width=\"30\" height=\"30\" className=\"d-inline-block align-top\" alt=\"\" /> */}\n          Alexandria  \n        </a>\n        <ul className=\"navbar-nav px-3\">\n          <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n            <small className=\"text-secondary\">\n              <small id=\"account\">{this.props.account}</small>\n            </small>\n            { this.props.account\n              ? <img\n                className='ml-2'\n                width='30'\n                height='30'\n                src={`data:image/png;base64,${new Identicon(this.props.account, 30).toString()}`}\n              />\n              : <span></span>\n            }\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;","import React, { Component } from 'react';\nimport Identicon from 'identicon.js';\n\nclass Main extends Component {\n\n  render() {\n    return (\n      <div className=\"container-fluid mt-5\">\n        <div className=\"row\">\n          <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '500px' }}>\n            <div className=\"content mr-auto ml-auto\">\n              <p>&nbsp;</p>\n              <h2>Upload book</h2>\n              <form onSubmit={(event) => {\n                event.preventDefault() // what is this\n                const description = this.imageDescription.value // possible bug here, naming\n                this.props.uploadPost(description)\n              }}>\n\n              {/* Upload Thumbnail */}\n              <br></br>              \n              <label for=\"previewImageUpload\">Preview Image (JPG, PNG)</label>\n              <br></br>\n              <input id=\"previewImageUpload\" type='file' title=\"\" accept=\".jpg, .png\" onChange={this.props.captureFile}></input>            \n              <br></br>\n\n              {/* Upload PDF File */}\n              <br></br>              \n              <label for=\"previewImageUpload\">File Upload (PDF)</label>\n              <br></br>\n              <input id=\"previewImageUpload\" type='file' title=\"\" accept=\".pdf\" onChange={this.props.capturePostFile}></input>            \n              <br></br>\n\n\n              \n\n              {/* Image Description */}\n              <br></br>\n              <div className=\"form-group mr-sm-2\">\n                <label for=\"imageDescription\">Description</label>\n                <input \n                  id=\"imageDescription\"\n                  type=\"text\"\n                  ref={(input) => {this.imageDescription = input}}\n                  className=\"form-control\"\n                  required\n                  >\n                </input>\n\n              </div>                \n                  \n                \n                \n\n\n                <br></br>\n                <button type=\"submit\" className=\"btn btn-primary btn-block btn-lg\">Upload!</button>\n              </form>\n\n              <p>&nbsp;</p>\n                {this.props.posts.map((image, key) => {\n                  return(\n                    <div className=\"card mb-4\" key={key}>\n                      <div className=\"card-header\">\n                      <img\n                        className=\"mr-2\"\n                        width='30'\n                        height='30'\n                        src={`data:image/png;base64,${new Identicon(image.author, 30).toString()}`}                      \n                      ></img>\n                      <small className=\"text-muted\">{image.author}</small>\n                      </div>\n\n                      <ul id=\"imageList\" className=\"list-group list-group-flush\">\n                        <li className=\"list-group-item\">\n                          <p className=\"text-center\">\n                            <img src={`https://ipfs.infura.io/ipfs/${image.imageHash}`} style={{maxWidth: '420px'}}></img>\n                          </p>\n                          <p>{image.description}</p>\n                          <form action={`https://ipfs.infura.io/ipfs/${image.postHash}`}>\n                            <input type=\"submit\" value=\"Open PDF\" />\n                          </form>\n                        </li>\n                        <li key={key} className=\"list-group-item py-2\">\n                            <small className=\"float-left mt-1 text-muted\">\n                              TIPS: {window.web3.utils.fromWei(image.tipAmount.toString(), 'Ether')} ETH\n                            </small>\n                            <button\n                              className=\"btn btn-link btn-sm float-right pt-0\"\n                              name={image.id}\n                              onClick={(event) => {\n                                let tipAmount = window.web3.utils.toWei('0.01', 'Ether')\n                                console.log(event.target.name, tipAmount)\n                                this.props.tipPostAuthor(event.target.name, tipAmount)\n                              }}\n                            >\n                              TIP 0.01 ETH\n                            </button>\n\n                        </li>\n                      </ul>\n                    </div>\n                  )\n                })}\n\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;","module.exports = __webpack_public_path__ + \"static/media/photo.d6cbd8e6.png\";"],"sourceRoot":""}